<?php
/**
 * OauthApi
 * PHP version 5
 *
 * @category Class
 * @package  Swappy
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swappy REST API
 *
 * This is Swappy's REST API. See below for all available endpoints. This is an <strong>alpha version</strong> and might still be subject to change
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swappy\Api\Endpoint;

use \Swappy\Configuration;
use \Swappy\ApiClient;
use \Swappy\ApiException;
use \Swappy\ObjectSerializer;

/**
 * OauthApi Class Doc Comment
 *
 * @category Class
 * @package  Swappy
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OauthApi
{

    /**
     * API Client
     *
     * @var \Swappy\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swappy\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swappy\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.swappy.com/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swappy\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swappy\ApiClient $apiClient set the API client
     *
     * @return OauthApi
     */
    public function setApiClient(\Swappy\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getMe
     *
     * 
     *
     * @param string $language Language for the response (optional)
     * @return \Swappy\Api\Model\Member
     * @throws \Swappy\ApiException on non-2xx response
     */
    public function getMe($language = null)
    {
        list($response) = $this->getMeWithHttpInfo($language);
        return $response;
    }

    /**
     * Operation getMeWithHttpInfo
     *
     * 
     *
     * @param string $language Language for the response (optional)
     * @return Array of \Swappy\Api\Model\Member, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swappy\ApiException on non-2xx response
     */
    public function getMeWithHttpInfo($language = null)
    {
        // parse inputs
        $resourcePath = "/v1/me";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swappy\Api\Model\Member',
                '/v1/me'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swappy\Api\Model\Member', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swappy\Api\Model\Member', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMyAddresses
     *
     * 
     *
     * @param string $if_none_match Etag, will return &#x60;304 Not Modified&#x60; if content hasn&#39;t changed (optional)
     * @param string $language Language for the response (optional)
     * @return \Swappy\Api\Model\Address[]
     * @throws \Swappy\ApiException on non-2xx response
     */
    public function getMyAddresses($if_none_match = null, $language = null)
    {
        list($response) = $this->getMyAddressesWithHttpInfo($if_none_match, $language);
        return $response;
    }

    /**
     * Operation getMyAddressesWithHttpInfo
     *
     * 
     *
     * @param string $if_none_match Etag, will return &#x60;304 Not Modified&#x60; if content hasn&#39;t changed (optional)
     * @param string $language Language for the response (optional)
     * @return Array of \Swappy\Api\Model\Address[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swappy\ApiException on non-2xx response
     */
    public function getMyAddressesWithHttpInfo($if_none_match = null, $language = null)
    {
        // parse inputs
        $resourcePath = "/v1/me/addresses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swappy\Api\Model\Address[]',
                '/v1/me/addresses'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swappy\Api\Model\Address[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swappy\Api\Model\Address[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation oauth2AuthorizeGet
     *
     * 
     *
     * @param int $client_id Application ID (required)
     * @param string $redirect_uri URI where the user will be returned to, must match application&#39;s configuration (required)
     * @param string $state State that will be passed back to return_uri (required)
     * @param string $response_type Type of request (required)
     * @param string $scope Space separated scopes (optional)
     * @param string $language Language for the response (optional)
     * @return \Swappy\Api\Model\Member
     * @throws \Swappy\ApiException on non-2xx response
     */
    public function oauth2AuthorizeGet($client_id, $redirect_uri, $state, $response_type, $scope = null, $language = null)
    {
        list($response) = $this->oauth2AuthorizeGetWithHttpInfo($client_id, $redirect_uri, $state, $response_type, $scope, $language);
        return $response;
    }

    /**
     * Operation oauth2AuthorizeGetWithHttpInfo
     *
     * 
     *
     * @param int $client_id Application ID (required)
     * @param string $redirect_uri URI where the user will be returned to, must match application&#39;s configuration (required)
     * @param string $state State that will be passed back to return_uri (required)
     * @param string $response_type Type of request (required)
     * @param string $scope Space separated scopes (optional)
     * @param string $language Language for the response (optional)
     * @return Array of \Swappy\Api\Model\Member, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swappy\ApiException on non-2xx response
     */
    public function oauth2AuthorizeGetWithHttpInfo($client_id, $redirect_uri, $state, $response_type, $scope = null, $language = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling oauth2AuthorizeGet');
        }
        // verify the required parameter 'redirect_uri' is set
        if ($redirect_uri === null) {
            throw new \InvalidArgumentException('Missing the required parameter $redirect_uri when calling oauth2AuthorizeGet');
        }
        // verify the required parameter 'state' is set
        if ($state === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state when calling oauth2AuthorizeGet');
        }
        // verify the required parameter 'response_type' is set
        if ($response_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $response_type when calling oauth2AuthorizeGet');
        }
        // parse inputs
        $resourcePath = "/oauth2/authorize";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($client_id !== null) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($client_id);
        }
        // query params
        if ($redirect_uri !== null) {
            $queryParams['redirect_uri'] = $this->apiClient->getSerializer()->toQueryValue($redirect_uri);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = $this->apiClient->getSerializer()->toQueryValue($scope);
        }
        // query params
        if ($response_type !== null) {
            $queryParams['response_type'] = $this->apiClient->getSerializer()->toQueryValue($response_type);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swappy\Api\Model\Member',
                '/oauth2/authorize'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swappy\Api\Model\Member', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swappy\Api\Model\Member', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation oauth2TokenPost
     *
     * 
     *
     * @param int $client_id App API id (required)
     * @param string $client_secret App API secret (required)
     * @param string $grant_type Grant type for this token request (required)
     * @param string $code Access code, **required** for &#x60;authorization_code&#x60; grant type. (optional)
     * @param string $scope Space separated scope for &#x60;authorization_code&#x60; grant type. (optional)
     * @param string $redirect_uri Return URI for security purpose, must match the one sent to &#x60;/authorize&#x60;, **required** for &#x60;authorization_code&#x60; grant type. (optional)
     * @param string $language Language for the response (optional)
     * @return void
     * @throws \Swappy\ApiException on non-2xx response
     */
    public function oauth2TokenPost($client_id, $client_secret, $grant_type, $code = null, $scope = null, $redirect_uri = null, $language = null)
    {
        list($response) = $this->oauth2TokenPostWithHttpInfo($client_id, $client_secret, $grant_type, $code, $scope, $redirect_uri, $language);
        return $response;
    }

    /**
     * Operation oauth2TokenPostWithHttpInfo
     *
     * 
     *
     * @param int $client_id App API id (required)
     * @param string $client_secret App API secret (required)
     * @param string $grant_type Grant type for this token request (required)
     * @param string $code Access code, **required** for &#x60;authorization_code&#x60; grant type. (optional)
     * @param string $scope Space separated scope for &#x60;authorization_code&#x60; grant type. (optional)
     * @param string $redirect_uri Return URI for security purpose, must match the one sent to &#x60;/authorize&#x60;, **required** for &#x60;authorization_code&#x60; grant type. (optional)
     * @param string $language Language for the response (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swappy\ApiException on non-2xx response
     */
    public function oauth2TokenPostWithHttpInfo($client_id, $client_secret, $grant_type, $code = null, $scope = null, $redirect_uri = null, $language = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling oauth2TokenPost');
        }
        // verify the required parameter 'client_secret' is set
        if ($client_secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_secret when calling oauth2TokenPost');
        }
        // verify the required parameter 'grant_type' is set
        if ($grant_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $grant_type when calling oauth2TokenPost');
        }
        // parse inputs
        $resourcePath = "/oauth2/token";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = $this->apiClient->getSerializer()->toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = $this->apiClient->getSerializer()->toFormValue($client_secret);
        }
        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = $this->apiClient->getSerializer()->toFormValue($grant_type);
        }
        // form params
        if ($code !== null) {
            $formParams['code'] = $this->apiClient->getSerializer()->toFormValue($code);
        }
        // form params
        if ($scope !== null) {
            $formParams['scope'] = $this->apiClient->getSerializer()->toFormValue($scope);
        }
        // form params
        if ($redirect_uri !== null) {
            $formParams['redirect_uri'] = $this->apiClient->getSerializer()->toFormValue($redirect_uri);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/token'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
